{"version":3,"sources":["http-common.js","services/upload-files.service.js","components/UploadContainer.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","file","onUploadProgress","formData","FormData","append","http","put","name","get","UploadContainer","selectFiles","event","setState","progressInfos","selectedFiles","target","files","upload","idx","_progressInfos","state","UploadService","percentage","Math","round","loaded","total","then","response","prev","message","data","getFiles","fileInfos","catch","uploadFiles","i","length","push","fileName","undefined","this","map","progressInfo","index","className","role","aria-valuenow","aria-valuemin","aria-valuemax","style","width","type","multiple","onChange","disabled","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"6SAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,4DACTC,QAAS,CACP,eAAgB,sBCgBL,M,+FAlBNC,EAAMC,GACX,IAAIC,EAAW,IAAIC,SAInB,OAFAD,EAASE,OAAO,OAAQJ,GAEjBK,EAAKC,IAAL,WAAaN,EAAKO,MAAQL,EAAU,CACzCH,QAAS,CACP,eAAgB,uBAElBE,uB,iCAKF,OAAOI,EAAKG,IAAI,S,MCdCC,E,kDAEjB,aAAe,IAAD,8BACV,gBASJC,YAAc,SAACC,GACX,EAAKC,SAAS,CACVC,cAAe,GACfC,cAAeH,EAAMI,OAAOC,SAbtB,EAiBdC,OAAS,SAACC,EAAKlB,GACX,IAAImB,EAAc,YAAO,EAAKC,MAAMP,eAEpCQ,EAAcJ,OAAOjB,GAAM,SAACW,GAC1BQ,EAAeD,GAAKI,WAAaC,KAAKC,MAAO,IAAMb,EAAMc,OAAUd,EAAMe,OACzE,EAAKd,SAAS,CACZO,sBAGDQ,MAAK,SAACC,GAQL,OAPA,EAAKhB,UAAS,SAACiB,GAEb,MAAO,CACLC,SAFgBD,EAAKC,QAAUD,EAAKC,QAAU,KAAO,IAE9BF,EAASG,KAAKD,YAIlCT,EAAcW,cAEtBL,MAAK,SAACX,GACL,EAAKJ,SAAS,CACZqB,UAAWjB,EAAMe,UAGpBG,OAAM,WACLf,EAAeD,GAAKI,WAAa,EACjC,EAAKV,SAAS,CACZC,cAAeM,EACfW,QAAS,mCA7CL,EAkDdK,YAAc,WAKV,IAJA,IAAMrB,EAAgB,EAAKM,MAAMN,cAE7BK,EAAiB,GAEZiB,EAAI,EAAGA,EAAItB,EAAcuB,OAAQD,IACtCjB,EAAemB,KAAK,CAAEhB,WAAY,EAAGiB,SAAUzB,EAAcsB,GAAG7B,OAGpE,EAAKK,SACL,CACIC,cAAeM,EACfW,QAAS,OAEb,WACA,IAAK,IAAIM,EAAI,EAAGA,EAAItB,EAAcuB,OAAQD,IACtC,EAAKnB,OAAOmB,EAAGtB,EAAcsB,QAhEjC,EAAKhB,MAAQ,CACTN,mBAAe0B,EACf3B,cAAe,GACfiB,QAAS,KACTG,UAAW,IANL,E,qDAwEJ,IAAD,EACwDQ,KAAKrB,MAA1DN,EADH,EACGA,cAAeD,EADlB,EACkBA,cADlB,EACiCiB,QADjC,EAC0CG,UAE/C,OACI,6BACKpB,GACDA,EAAc6B,KAAI,SAACC,EAAcC,GAAf,OAClB,yBAAKC,UAAU,QACX,8BAAOF,EAAaJ,UACpB,yBAAKM,UAAU,YACX,yBACAA,UAAU,iCACVC,KAAK,cACLC,gBAAeJ,EAAarB,WAC5B0B,gBAAc,IACdC,gBAAc,MACdC,MAAO,CAAEC,MAAOR,EAAarB,WAAa,MAEzCqB,EAAarB,WARd,UAchB,2BAAOuB,UAAU,mBACf,2BAAOO,KAAK,OAAOC,UAAQ,EAACC,SAAUb,KAAK/B,eAG7C,4BACEmC,UAAU,kBACVU,UAAWzC,EACX0C,QAASf,KAAKN,aAHhB,e,GAtGqCsB,aCa9BC,MAXf,WACE,OACE,yBAAKb,UAAU,YAAYK,MAAO,CAAEC,MAAO,UACzC,yBAAKN,UAAU,QACb,sDAEF,kBAAC,EAAD,QCCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLC,QAAQD,MAAMA,EAAM5C,c","file":"static/js/main.2c8da368.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://skylight-react-interview-project.s3.amazonaws.com\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n","import http from \"../http-common\";\n\nclass UploadFilesService {\n  upload(file, onUploadProgress) {\n    let formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    return http.put(`/${file.name}`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress,\n    });\n  }\n\n  getFiles() {\n    return http.get(\"/\");\n  }\n}\n\nexport default new UploadFilesService();\n","import React, { Component } from 'react';\nimport UploadService from '../services/upload-files.service';\n\nexport default class UploadContainer extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            selectedFiles: undefined,\n            progressInfos: [],\n            message: null, \n            fileInfos: []\n        };\n    }\n\n    selectFiles = (event) => {\n        this.setState({\n            progressInfos: [],\n            selectedFiles: event.target.files,\n        });\n    }\n\n    upload = (idx, file) => {\n        let _progressInfos = [...this.state.progressInfos];\n\n        UploadService.upload(file, (event) => {\n          _progressInfos[idx].percentage = Math.round((100 * event.loaded) / event.total);\n          this.setState({\n            _progressInfos,\n          });\n        })\n          .then((response) => {\n            this.setState((prev) => {\n              let prevMessage = prev.message ? prev.message + \"\\n\" : \"\";\n              return {\n                message: prevMessage + response.data.message,\n              };\n            });\n    \n            return UploadService.getFiles();\n          })\n          .then((files) => {\n            this.setState({\n              fileInfos: files.data,\n            });\n          })\n          .catch(() => {\n            _progressInfos[idx].percentage = 0;\n            this.setState({\n              progressInfos: _progressInfos,\n              message: \"Could not upload the file!\",\n            });\n          });\n    }\n\n    uploadFiles = () => {\n        const selectedFiles = this.state.selectedFiles;\n\n        let _progressInfos = [];\n\n        for (let i = 0; i < selectedFiles.length; i++) {\n            _progressInfos.push({ percentage: 0, fileName: selectedFiles[i].name });\n        }\n\n        this.setState(\n        {\n            progressInfos: _progressInfos,\n            message: null,\n        },\n        () => {\n        for (let i = 0; i < selectedFiles.length; i++) {\n            this.upload(i, selectedFiles[i]);\n        }\n      }\n    );\n    }\n\n    render() {\n        const { selectedFiles, progressInfos, message, fileInfos } = this.state;\n        \n        return (\n            <div>\n                {progressInfos &&\n                progressInfos.map((progressInfo, index) => (\n                <div className=\"mb-2\">\n                    <span>{progressInfo.fileName}</span>\n                    <div className=\"progress\">\n                        <div\n                        className=\"progress-bar progress-bar-info\"\n                        role=\"progressbar\"\n                        aria-valuenow={progressInfo.percentage}\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        style={{ width: progressInfo.percentage + \"%\" }}\n                        >\n                        {progressInfo.percentage}%\n                        </div>\n                        </div>\n                    </div>\n                ))}\n                \n        <label className=\"btn btn-default\">\n          <input type=\"file\" multiple onChange={this.selectFiles} />\n        </label>\n\n        <button\n          className=\"btn btn-success\"\n          disabled={!selectedFiles}\n          onClick={this.uploadFiles}\n        >\n          Upload\n        </button>\n\n            </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport UploadContainer from './components/UploadContainer'\n\nfunction App() {\n  return (\n    <div className=\"container\" style={{ width: \"600px\" }}>\n      <div className=\"my-2\">\n        <h4>Upload multiple Files</h4>\n      </div>\n      <UploadContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}